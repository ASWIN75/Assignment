#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

int networkDelayTime(vector<vector<int>>& times, int n, int k) {
    
    vector<int> dist(n + 1, INT_MAX);
    

    vector<vector<pair<int, int>>> graph(n + 1);
    
  
    for (const auto& time : times) {
        int source = time[0];
        int target = time[1];
        int weight = time[2];
        graph[source].push_back({target, weight});
    }
    
   
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    
   
    dist[k] = 0;
    pq.push({0, k});
    
   
    while (!pq.empty()) {
        int currNode = pq.top().second;
        int currDist = pq.top().first;
        pq.pop();
        
       
        if (currDist > dist[currNode])
            continue;
        
       
        for (const auto& neighbor : graph[currNode]) {
            int nextNode = neighbor.first;
            int weight = neighbor.second;
            
           
            if (currDist + weight < dist[nextNode]) {
                dist[nextNode] = currDist + weight;
                pq.push({dist[nextNode], nextNode});
            }
        }
    }
    
   
    int maxTime = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INT_MAX)
            return -1; // There is a node that cannot receive the signal
        maxTime = max(maxTime, dist[i]);
    }
    
    return maxTime;
}

int main() {
    vector<vector<int>> times = {{2, 1, 1}, {2, 3, 1}, {3, 4, 1}};
    int n = 4;
    int k = 2;
    
    int minTime = networkDelayTime(times, n, k);
    
    cout << "Minimum time to reach all nodes: " << minTime << endl;
    
    return 0;
}