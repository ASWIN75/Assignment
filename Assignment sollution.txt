#include <iostream>
#include <vector>
#include <cmath>

std::vector<int> findMaxNetworkQuality(std::vector<std::vector<int>>& towers, int radius) {
    int maxQuality = 0;
    std::vector<int> maxCoordinate = {0, 0};

    for (int x = 0; x <= 50; x++) {
        for (int y = 0; y <= 50; y++) {
            int networkQuality = 0;
            for (const auto& tower : towers) {
                int xi = tower[0];
                int yi = tower[1];
                int qi = tower[2];
                double distance = std::sqrt(std::pow(xi - x, 2) + std::pow(yi - y, 2));
                if (distance <= radius) {
                    networkQuality += std::floor(qi / (1 + distance));
                }
            }
            if (networkQuality > maxQuality) {
                maxQuality = networkQuality;
                maxCoordinate = {x, y};
            } else if (networkQuality == maxQuality) {
                if (x < maxCoordinate[0] || (x == maxCoordinate[0] && y < maxCoordinate[1])) {
                    maxCoordinate = {x, y};
                }
            }
        }
    }

    return maxCoordinate;
}

int main() {
    std::vector<std::vector<int>> towers = {{1, 2, 5}, {2, 1, 7}, {3, 1, 9}};
    int radius = 2;

    std::vector<int> result = findMaxNetworkQuality(towers, radius);

    std::cout << "Output: [" << result[0] << ", " << result[1] << "]" << std::endl;

    return 0;
}